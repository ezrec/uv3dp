//
// Copyright (c) 2020 Jason S. McMullan <jason.mcmullan@gmail.com>
//

// Package uv3dp is a set of tools for data exchange between UV Resin based 3D printers
package cbddlp

import (
	"bytes"
	"encoding/binary"
	"image"

	"testing"

	"github.com/ezrec/uv3dp"
	"github.com/google/go-cmp/cmp"
)

var (
	greyMap = []byte{0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xff}
	aa1Map  = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff}
	aa2Map  = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa, 0xff}
	aa4Map  = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x44, 0x88, 0xff}
	aa8Map  = []byte{0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xff}
)

type AliasPrintable struct {
	uv3dp.Printable
}

func (ap *AliasPrintable) Layer(index int) (layer uv3dp.Layer) {
	layer = ap.Printable.Layer(index)

	layer.Image.Pix = greyMap

	return
}

var (
	// Collect an alias printable
	aliasPrintable = &AliasPrintable{uv3dp.NewEmptyPrintable(uv3dp.Properties{
		Size: uv3dp.Size{
			X: 10,
			Y: 1,
			Millimeter: uv3dp.SizeMillimeter{
				X: 10.0,
				Y: 1.0,
			},
			Layers:      1, // 1 normal
			LayerHeight: 0.05,
		},
		Exposure: uv3dp.Exposure{
			LightOnTime:   0.000000001,
			LightOffTime:  0.000000001,
			LightPWM:      255,
			LiftHeight:    1.0,
			LiftSpeed:     1.0,
			RetractHeight: 1.0,
			RetractSpeed:  1.0,
		},
		Bottom: uv3dp.Bottom{
			Count: 1,
			Exposure: uv3dp.Exposure{
				LightOnTime:   0.000000001,
				LightOffTime:  0.000000001,
				LightPWM:      255,
				LiftHeight:    1.0,
				LiftSpeed:     1.0,
				RetractHeight: 1.0,
				RetractSpeed:  1.0,
			},
		},
		Preview: map[uv3dp.PreviewType]image.Image{
			uv3dp.PreviewTypeTiny: image.NewGray(image.Rect(0, 0, 1, 1)),
			uv3dp.PreviewTypeHuge: image.NewGray(image.Rect(0, 0, 1, 1)),
		},
	})}

	aliasRawAA1 = []byte{0x19, 0x0, 0xfd, 0x12, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x41, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x1b, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcd, 0xcc, 0x4c, 0x3d, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x70, 0x0, 0x0, 0x0, 0xf4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x94, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xff, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x90, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb4, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x18, 0xb7, 0xd1, 0x38, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x18, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x82}
	aliasRawAA2 = []byte{0x19, 0x0, 0xfd, 0x12, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x41, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x1b, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcd, 0xcc, 0x4c, 0x3d, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x70, 0x0, 0x0, 0x0, 0xf4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x94, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0xff, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x90, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb4, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x18, 0xb7, 0x51, 0x39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x3c, 0x1, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x40, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x81, 0x1, 0x81, 0x8, 0x82}

	aliasRawAA4 = []byte{0x19, 0x0, 0xfd, 0x12, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x41, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x1b, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcd, 0xcc, 0x4c, 0x3d, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x70, 0x0, 0x0, 0x0, 0xf4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x94, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0xff, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x90, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb4, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x18, 0xb7, 0xd1, 0x39, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x84, 0x1, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x88, 0x1, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x8c, 0x1, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x90, 0x1, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x81, 0x3, 0x81, 0x6, 0x81, 0x2, 0x81, 0x7, 0x81, 0x1, 0x81, 0x8, 0x82}
	aliasRawAA8 = []byte{0x19, 0x0, 0xfd, 0x12, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x41, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x1b, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xcd, 0xcc, 0x4c, 0x3d, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x1, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x70, 0x0, 0x0, 0x0, 0xf4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x94, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb8, 0x0, 0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0xff, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x90, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb4, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x0, 0x0, 0x80, 0x3f, 0x18, 0xb7, 0x51, 0x3a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x14, 0x2, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x18, 0x2, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x1c, 0x2, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x20, 0x2, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x24, 0x2, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x28, 0x2, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x2c, 0x2, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5f, 0x70, 0x89, 0x30, 0x5f, 0x70, 0x89, 0x30, 0x30, 0x2, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x81, 0x7, 0x81, 0x2, 0x81, 0x6, 0x81, 0x3, 0x81, 0x5, 0x81, 0x4, 0x81, 0x4, 0x81, 0x5, 0x81, 0x3, 0x81, 0x6, 0x81, 0x2, 0x81, 0x7, 0x81, 0x1, 0x81, 0x8, 0x82}
)

// reuse 'bufferMap' from format_empty_test.go

func TestAliasToRaw(t *testing.T) {
	table := []struct {
		AntiAlias int
		Raw       []byte
	}{
		{1, aliasRawAA1},
		{2, aliasRawAA2},
		{4, aliasRawAA4},
		{8, aliasRawAA8},
	}

	for _, item := range table {
		formatter := NewCbddlpFormatter(".cbddlp")
		formatter.AntiAlias = item.AntiAlias

		buffWriter := &bytes.Buffer{}
		formatter.Encode(buffWriter, aliasPrintable)

		encoded_buff := buffWriter.Bytes()

		aliasRaw := item.Raw
		if !bytes.Equal(encoded_buff, aliasRaw) {
			t.Errorf("expected [%d byte encoding], got [%d byte encoding]", len(aliasRaw), len(encoded_buff))
			t.Logf("%+#v", encoded_buff)
			if len(encoded_buff) == len(aliasRaw) {
				for i := 0; i < len(aliasRaw)-3; i += 4 {
					a := binary.LittleEndian.Uint32(aliasRaw[i : i+4])
					b := binary.LittleEndian.Uint32(encoded_buff[i : i+4])
					if a != b {
						t.Logf("[%05x] %08x != %08x", i, a, b)
					}
				}
			}
		}
	}
}

func TestRawToAlias(t *testing.T) {
	table := []struct {
		AntiAlias int
		Raw       []byte
		GrayMap   []byte
	}{
		{AntiAlias: 1, Raw: aliasRawAA1, GrayMap: aa1Map},
		{AntiAlias: 2, Raw: aliasRawAA2, GrayMap: aa2Map},
		{AntiAlias: 4, Raw: aliasRawAA4, GrayMap: aa4Map},
		{AntiAlias: 8, Raw: aliasRawAA8, GrayMap: aa8Map},
	}

	for _, item := range table {
		formatter := NewCbddlpFormatter(".cbddlp")

		aliasRaw := item.Raw
		buffReader := &bufferMap{Buffer: aliasRaw}

		result, err := formatter.Decode(buffReader, int64(len(aliasRaw)))
		if err != nil {
			t.Fatalf("expected nil, got %v", err)
		}

		eProp := aliasPrintable.Properties()
		rProp := result.Properties()

		fixupV2(&eProp)
		fixupV2(&rProp)

		if !cmp.Equal(eProp, rProp) {
			t.Errorf("aa%v: expected input printable to match expected printable!", item.AntiAlias)
			t.Logf("%+v", eProp)
			t.Logf("%+v", rProp)
		}

		rLayer := result.Layer(0)
		if !cmp.Equal(rLayer.Image.Pix, item.GrayMap) {
			t.Errorf("aa%v: expected image to exactly match", item.AntiAlias)
			t.Logf("%+#v", item.GrayMap)
			t.Logf("%+#v", rLayer.Image.Pix)
		}
	}
}
